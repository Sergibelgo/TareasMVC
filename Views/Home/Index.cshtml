@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer localizer;
@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center mb-3">
    <h1 class="display-4">
        @localizer["Mis tareas"]
    </h1>
    <button class="btn btn-primary" type="button" onclick="agregarNuevaTareaAlListado()">@localizer["Agregar nueva tarea"]</button>
</div>
<div id="contenedor-listado-tareas" class="text-center">
    <div data-bind="visible:cargando" class="spinner-border">
        <span class="visually-hidden">@localizer["Cargando"]...</span>
    </div>
    <div data-bind="visible:noHayTareas">
        @localizer["No hay tareas"]
    </div>
    <div class="text-start" id="reordenable" data-bind="foreach: tareas">
        <div name="tarea" class="border mb-2 p-2" style="cursor:pointer" data-bind="click:manejarClickTarea">
            <div data-bind="text:titulo,hidden:esNuevo" class="fw-bold reordenable">
            </div>
            <input type="text" name="titulo-tarea" autocomplete="off" data-bind="value:titulo,visible:esNuevo,attr:{'data-id':id},event:{focusout: manejarFocusoutTituloTarea}" />
        </div>
    </div>
</div>
<partial name="_ModalEditarTarea" />
@section Scripts{
    <script src="~/js/Tareas.js" asp-append-version="true"></script>
    <script src="~/js/Pasos.js" asp-append-version="true"></script>
    <script>
        function tareaListadoViewModelFn() {
            let self = this;
            self.tareas = ko.observableArray([
            ]);
            self.cargando = ko.observable(true);
            self.noHayTareas = ko.pureComputed(() => {
                if (self.cargando()) {
                    return false;
                }
                return self.tareas().length == 0;
            })
        }
        const tareaEditarVM = {
            id: 0,
            titulo: ko.observable(''),
            descripcion: ko.observable(''),
            pasos: ko.observableArray([])
        }
        function tareaElementoListadoDTO({ id, titulo }) {
            var self = this;
            self.id = ko.observable(id);
            self.titulo = ko.observable(titulo);
            self.esNuevo = ko.pureComputed(function () {
                return self.id() == 0
            })
        }
        function pasoDTO({ id, descripcion, realizado, modoEdicion }) {
            var self = this;
            self.id = ko.observable(id || 0);
            self.descripcion = ko.observable(descripcion || "");
            self.realizado = ko.observable(realizado);
            self.modoEdicion = ko.observable(modoEdicion);
            self.descipcionAnterior = "";
            self.esNuevo = ko.pureComputed(function () {
                return self.id() == 0;
            })
        }
        const tareaListadoViewModel = new tareaListadoViewModelFn();
        $(() => {
            ko.applyBindings(tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'));
            obtenerTareas();
            ko.applyBindings(tareaEditarVM, document.getElementById("modal-editar-tarea"));
            $("#reordenable").sortable({
                axis: "y",
                stop: async function () {
                    await actualizarOrdenTareas();
                }
            })

        })

    </script>

}